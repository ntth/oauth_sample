# encoding: utf-8
# TL;DR: YOU SHOULD DELETE THIS FILE
#
# This file was generated by Cucumber-Rails and is only here to get you a head start
# These step definitions are thin wrappers around the Capybara/Webrat API that lets you
# visit pages, interact with widgets and make assertions about page content.
#
# If you use these step definitions as basis for your features you will quickly end up
# with features that are:
#
# * Hard to maintain
# * Verbose to read
#
# A much better approach is to write your own higher level step definitions, following
# the advice in the following blog posts:
#
# * http://benmabey.com/2008/05/19/imperative-vs-declarative-scenarios-in-user-stories.html
# * http://dannorth.net/2011/01/31/whose-domain-is-it-anyway/
# * http://elabs.se/blog/15-you-re-cuking-it-wrong
#

require 'uri'
require 'cgi'

module WithinHelpers
  def with_scope(locator)
    locator ? within(*selector_for(locator)) { yield } : yield
  end
end
World(WithinHelpers)

前提 /^"([^"]*)"ページを表示している$/ do |page_name|
  visit path_to(page_name)
end

もし /^"([^"]*)"ページを表示する$/ do |page_name|
  visit path_to(page_name)
end

もし /^"([^"]*)"ボタンをクリックする$/ do |button|
  click_button(button)
end

もし /^"([^"]*)"リンクをクリックする$/ do |link|
  click_link(link)
end

もし /^"([^"]*)"に"([^"]*)"と入力する$/ do |field, value|
  fill_in(field, :with => value)
end

もし /^以下の項目を入力する:$/ do |fields|
  fields.rows_hash.each do |name, value|
    step %{"#{name}"に"#{value}"と入力する}
  end
end

もし /^"([^"]*)"から"([^"]*)"を選択する$/ do |field, value|
  select(value, :from => field)
end

もし /^"([^"]*)"をチェックする$/ do |field|
  check(field)
end

もし /^"([^"]*)"のチェックを外す$/ do |field|
  uncheck(field)
end

もし /^"([^"]*)"を選択する$/ do |field|
  choose(field)
end

もし /^"([^"]*)"としてファイル"([^"]*)"を選択する$/ do |field, path|
  attach_file(field, File.expand_path(path))
end

ならば /^"([^"]*)"と表示されていること$/ do |text|
  if page.respond_to? :should
    page.should have_content(text)
  else
    assert page.has_content?(text)
  end
end

ならば /^\/([^\/]*)\/と表示されていること$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_xpath('//*', :text => regexp)
  else
    assert page.has_xpath?('//*', :text => regexp)
  end
end

ならば /^"([^"]*)"と表示されていないこと$/ do |text|
  if page.respond_to? :should
    page.should have_no_content(text)
  else
    assert page.has_no_content?(text)
  end
end

ならば /^\/([^\/]*)\/と表示されていないこと$/ do |regexp|
  regexp = Regexp.new(regexp)

  if page.respond_to? :should
    page.should have_no_xpath('//*', :text => regexp)
  else
    assert page.has_no_xpath?('//*', :text => regexp)
  end
end

ならば /^入力項目"([^"]*)"に"([^"]*)"と表示されていること$/ do |field, value|
  field = find_field(field)
  field_value = (field.tag_name == 'textarea') ? field.text : field.value
  if field_value.respond_to? :should
    field_value.should =~ /#{value}/
  else
    assert_match(/#{value}/, field_value)
  end
end

ならば /^入力項目"([^"]*)"に"([^"]*)"と表示されていないこと$/ do |field, value|
  field = find_field(field)
  field_value = (field.tag_name == 'textarea') ? field.text : field.value
  if field_value.respond_to? :should_not
    field_value.should_not =~ /#{value}/
  else
    assert_no_match(/#{value}/, field_value)
  end
end

ならば /^"([^"]*)"がチェックされていること$/ do |label|
  field_checked = find_field(label)['checked']
  if field_checked.respond_to? :should
    field_checked.should be_true
  else
    assert field_checked
  end
end

ならば /^"([^"]*)"がチェックされていないこと$/ do |label|
  field_checked = find_field(label)['checked']
  if field_checked.respond_to? :should
    field_checked.should be_false
  else
    assert !field_checked
  end
end

ならば /^"([^"]*)"ページを表示していること$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

ならば /^ページを表示する$/ do
  save_and_open_page
end

show_me_the_page = lambda { ならば %{ページを表示する} }

ならば /^画面を目視$/, &show_me_the_page

# backword-compat for old japanese translation.
ならば /^デバッグ(?:のため)?$/, &show_me_the_page

